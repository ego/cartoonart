# This file is used to configure your project.
# Read more about the various options under:
# https://setuptools.pypa.io/en/latest/userguide/declarative_config.html
# https://setuptools.pypa.io/en/latest/references/keywords.html

[metadata]
name = cartoonart
description = Create cartoon from image or video.
author = Alter Ego
author_email =
license = MIT
license_files = LICENSE.txt
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8; variant=GFM
url = https://github.com/ego/cartoonart/
# Add here related links, for example:
project_urls =
    Documentation = https://ego.github.io/cartoonart/readme.html
    Source = https://github.com/ego/cartoonart/
    Download = https://pypi.org/project/cartoonart/#files

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python
    Environment :: Console
    Environment :: MacOS X
    Environment :: Other Environment
    Environment :: Win32 (MS Windows)
    Intended Audience :: Developers
    Intended Audience :: Education
    Intended Audience :: End Users/Desktop
    Intended Audience :: Information Technology
    Intended Audience :: Other Audience
    Intended Audience :: Science/Research
    Intended Audience :: System Administrators
    License :: Free For Educational Use
    License :: Free For Home Use
    License :: Free for non-commercial use
    Natural Language :: English
    Natural Language :: Polish
    Natural Language :: German
    Natural Language :: Czech
    Natural Language :: Finnish
    Natural Language :: Greek
    Natural Language :: Irish
    Natural Language :: Japanese
    Natural Language :: Korean
    Natural Language :: Slovak
    Natural Language :: Slovenian
    Natural Language :: Spanish
    Natural Language :: Ukrainian
    Operating System :: MacOS
    Operating System :: MacOS :: MacOS X
    Operating System :: Microsoft
    Operating System :: Microsoft :: Windows
    Operating System :: OS Independent
    Operating System :: POSIX
    Operating System :: Unix
    Programming Language :: C
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Programming Language :: Python :: 3.12
    Programming Language :: Python :: Implementation
    Programming Language :: Python :: Implementation :: CPython
    Topic :: Adaptive Technologies
    Topic :: Desktop Environment
    Topic :: Documentation
    Topic :: Documentation :: Sphinx
    Topic :: Education
    Topic :: Education :: Testing
    Topic :: Internet
    Topic :: Home Automation
    Topic :: Multimedia
    Topic :: Multimedia :: Graphics
    Topic :: Multimedia :: Graphics :: Capture
    Topic :: Multimedia :: Graphics :: Capture :: Digital Camera
    Topic :: Multimedia :: Video
    Topic :: Multimedia :: Video :: Capture
    Topic :: Multimedia :: Video :: Conversion
    Topic :: Multimedia :: Video :: Display
    Topic :: Scientific/Engineering :: Visualization
    Topic :: Software Development
    Topic :: Utilities


[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
python_requires = >=3.8

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    importlib-metadata; python_version<"3.8"


[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install cartoonart[PDF]` like:
# PDF = ReportLab; RXP

# Add here test requirements (semicolon/line-separated)
testing =
    setuptools
    pytest
    pytest-cov

[options.entry_points]
# Add here console scripts like:
console_scripts =
    cartoonart = cartoonart.cli:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov cartoonart --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 88
extend_ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[black]
line-length = 88
target-version = ['py38']
verbose = false

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.4.1
package = cartoonart
extensions =
    github_actions
    markdown
    pre_commit
